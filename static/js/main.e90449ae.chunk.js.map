{"version":3,"sources":["categoryListFile_install","categoryListFile_pcsv","apis/files.js","components/InputForm.js","database/db.js","components/pages/CreateJob.js","actions/index.js","actions/types.js","components/Footer.js","components/pages/CategoryList.js","components/Camera.js","components/Modal.js","apis/uploadImage.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/App.js","reducers/newJobReducer.js","reducers/index.js","reducers/categoriesReducer.js","reducers/toUploadReducer.js","reducers/clearStorageReducer.js","serviceWorker.js","index.js","localStorage.js"],"names":["module","exports","__webpack_require__","p","axios","create","baseURL","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","this","handleSubmit","Field","name","component","React","Component","reduxForm","form","validate","errors","userName","length","projectName","profileName","db","Dexie","version","stores","photoDb","CreateJob","state","toCategories","toDelete","createNewJob","setState","localStorage","getItem","includes","isOpen","err","console","log","Redirect","to","components_InputForm","initialValues","connect","dispatch","type","payload","profile","Footer","links","map","link","Link","path","key","id","classname","renderList","CategoryList","readTextFile","categoryListFile_install","categoryListFile_pcsv","categories","category","title","style","float","marginLeft","textAlign","photoQty","description","marginBottom","components_Footer","values","newJob","textFile","asyncToGenerator","regenerator_default","mark","_callee2","categoryArray","counter","wrap","_context2","prev","next","files","get","sent","data","split","forEach","tempArray","obj","push","stop","_x3","apply","arguments","styles","display","Camera","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","e","stopPropagation","content","alt","src","image","actions","document","querySelector","uploadImage","_callee","config","formData","_context","auth","username","password","crossDomain","FormData","append","post","abrupt","_x","CategoryEdit","_isMounted","testVar","categoryId","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","onClickThumbnail","URL","createObjectURL","photo","photoId","uploadFile","toastSettings","then","response","updateStatusTrue","getThumbnails","catch","onAddPhoto","img","renamedFile","startsWith","lastModified","File","saveToDb","_callee3","_context3","add","fileName","uploadStatus","_callee4","_context4","update","_callee5","collection","_context5","where","count","toArray","updatePhotoQty","message","status","toastManager","appearance","autoDismiss","getCategory","open","_this2","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","components_Camera","withToastManager","ownProps","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","clearLocalStorage","delete","es_Redirect","window","clear","App","dist","marginTop","HashRouter","Route","exact","INITIAL_STATE","appReducer","combineReducers","formReducer","undefined","action","objectSpread","_","mapKeys","defineProperty","uploadQueue","clearStorage","rootReducer","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","persistedState","localState","JSON","parse","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","stringify","setItem","setLocalStorage","render","es","components_App","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e90449ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.d1a472a9.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.f1797b56.bin\";","import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL:  'https://binaryfour.github.io'\r\n})\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"install\">Install</option>\r\n          <option value=\"pcsv\">PCSV</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  if (!formValues.userName || formValues.userName.length > 3){\r\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm',\r\n  validate\r\n})(InputForm);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\ndb.version(1).stores({\r\n    photoDb: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { createNewJob } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\nimport db from '../../database/db';\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = { toCategories: false, toDelete: false }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list\r\n  onSubmit = (formValues) => {\r\n    this.props.createNewJob(formValues);\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true });\r\n\r\n    //history.push('/categories');\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories === true){\r\n      return <Redirect to='/categories' />\r\n    }\r\n    else if(this.state.toDelete === true){\r\n      return <Redirect to='/delete' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>SolarPix 2.0</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createNewJob })(CreateJob);\r\n","import files from '../apis/files';\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  CREATE_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPLOAD_IMAGE,\r\n  UPDATE_PHOTOQTY,\r\n  CLEAR_LOCALSTORAGE\r\n} from './types';\r\n\r\nexport const clearLocalStorage = () => {\r\n  window.localStorage.clear();\r\n\r\n  return{\r\n    type: CLEAR_LOCALSTORAGE,\r\n    payload: {}\r\n  }\r\n}\r\n\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n\r\n\r\nexport const updatePhotoQty = (id, photoQty) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n//Submit button saves NewJob data and navigates user to category list\r\nexport const createNewJob = (userName, projectName, profileName) => dispatch => {\r\n\r\n  dispatch({ type: CREATE_JOB, payload: {userName: userName, projectName: projectName, profile: profileName }});\r\n  //history.push('/categories');\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    var categoryArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0 };\r\n        categoryArray.push(obj);\r\n        counter += 1;\r\n      }\r\n    });\r\n    //console.log(categoryArray);\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const CREATE_JOB = 'CREATE_JOB';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const CLEAR_LOCALSTORAGE = 'CLEAR_LOCALSTORAGE';\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return (\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nimport categoryListFile_install from '../../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../../categoryListFile_pcsv';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { readTextFile } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/delete', id: 'newJob', label: 'New Job' }\r\n]\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\r\n  //Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    try{\r\n      if(localStorage.getItem(\"state\").includes(`\"categories\":{}`)){\r\n        switch(this.props.formValues.profileName){\r\n          case 'install':\r\n            this.props.readTextFile(categoryListFile_install);\r\n            break;\r\n          case 'pcsv':\r\n            this.props.readTextFile(categoryListFile_pcsv);\r\n            break;\r\n          default:\r\n        }\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n\r\n      //catch error.  If state is null, create new categories list\r\n      //this.props.readTextFile(categoryListFile);\r\n    }\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n          <Link to={`/categories/${category.id}`} className=\"item\" key={category.id}>\r\n            <i className=\"large middle aligned icon camera\" />\r\n            <div className=\"content\">\r\n              {category.title}\r\n              <div style={{ float: 'right', marginLeft: '10px' }}>\r\n                Taken Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n            </div>\r\n          </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>Category List</h2>\r\n        <div className=\"ui celled list\" style={{ marginBottom: '48px'}}>{this.renderList()}</div>\r\n        <Footer links={links}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return{\r\n    categories: Object.values(state.categories),\r\n    formValues: state.newJob.userName\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass Camera extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui button large primary\" htmlFor=\"file\">Take Photo</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Camera;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import files from '../apis/files';\r\n\r\nconst uploadImage = async (image) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  return await files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nimport db from '../../database/db';\r\nimport Camera from '../Camera';\r\nimport Footer from '../Footer';\r\nimport Modal from '../Modal';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\n//import detectConnection from '../detectConnection';\r\n\r\n//Used for footer\r\nconst links = [\r\n  { path: '/categories', id:'categoryList', label: 'Back' }\r\n];\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none'\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount(){\r\n    this._isMounted = true;\r\n    this.props.getCategory(this.state.categoryId);\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    this.getThumbnails();\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({ showModal: '', image: image.photo, showImage: showImage, imageId: image.photoId });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image\r\n  uploadFile = () => {\r\n    const imageId = this.state.imageId;\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    uploadImage(this.state.image)\r\n    .then(response => {\r\n      //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n\r\n      if(this._isMounted){\r\n        this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })\r\n        this.getThumbnails();\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    });\r\n\r\n  }\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name\r\n  onAddPhoto = async (img) => {\r\n    if(img.type.startsWith('image')){\r\n      const formValues = this.props.formValues;\r\n      const imageQty = this.state.imageQty + 1;\r\n      const imageTitle = `${formValues.projectName}-${formValues.profileName}_${this.props.category.title}-${imageQty}_${formValues.userName}`;\r\n      const imageId = `${this.state.categoryId}_${img.lastModified}`;\r\n      //Set current imageId to lastmodified date and rename file\r\n      const renamedFile = new File([img], imageTitle+'.jpeg', {type: img.type} );\r\n      //console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n      await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n      //Save file to db, upload photo to server, refresh current page w/ thumbnails\r\n      try{\r\n        //If saveToDb fails, notify user w/ error code.\r\n        this.saveToDb(renamedFile);\r\n        this.getThumbnails();\r\n      }catch(error){\r\n        this.toastSettings(`Screenshot this and send to your dev ${error}`, 'error');\r\n      }\r\n      this.toastSettings(`Uploading File...`, 'info');\r\n\r\n      uploadImage(renamedFile)\r\n      .then(response => {\r\n        //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n        this.toastSettings('Uploaded Image!','success');\r\n        this.updateStatusTrue(imageId);\r\n        //This causes issues if component unmounts.  Illegal setState\r\n        if(this._isMounted){\r\n          this.getThumbnails();\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n        //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n      });\r\n    }\r\n    else{\r\n      //If user cancelled, don't do anything\r\n      //console.log('User cancelled image take/Wrong file type');\r\n      this.toastSettings('Only images can be accepted', 'warning');\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Saves image to db\r\n  saveToDb = async (img) => {\r\n    await db.photoDb.add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: false, photo: img });\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.photoDb.update(imageId, { uploadStatus: true });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    const categoryId = this.state.categoryId;\r\n    const photoQty = await db.photoDb.where('photoId').startsWith(categoryId).count();\r\n    //TODO: figure out how to catch await errors\r\n    if (photoQty > 0){\r\n      //getThumbnails\r\n      const collection = await db.photoDb.where('photoId').startsWith(categoryId);\r\n      const response = await collection.toArray();\r\n      this.setState({ thumbnails: response });\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    this.props.updatePhotoQty(categoryId, photoQty);\r\n    this.setState({ imageQty: photoQty });\r\n    //console.log(this.state.thumbnails);\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <Camera onSubmit={this.onAddPhoto}/>\r\n        <h3>Photos: {this.state.imageQty}</h3>\r\n        <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n          {this.renderList()}\r\n        </div>\r\n        <Footer links={links} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return{\r\n    category: (Object.values(state.categories))[ownProps.match.params.id],\r\n    formValues: state.newJob.userName\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { clearLocalStorage } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    this.props.clearLocalStorage();\r\n    //console.log('Storage should be cleared: ',localStorage.getItem(\"state\"));\r\n    await db.delete();\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">New Job</button>\r\n        <Link to=\"/categories\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/categories\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Detected previous session.  Delete old photos?'\r\n          content='You have session data.  If you create a new job, you will lose all the photos you took from your previous session.  Delete photos and create a new job?'\r\n          path='/categories'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default connect(null, { clearLocalStorage })(DeleteJob);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <ToastProvider>\r\n      <p>v0.1.2</p>\r\n      <div className=\"ui container\" style={{ marginTop: '10px'}}>\r\n        <HashRouter>\r\n          <div>\r\n            <Route path=\"/\" exact component={CreateJob}/>\r\n            <Route path=\"/categories\" exact component={CategoryList}/>\r\n            <Route path=\"/categories/:id\" exact component={CategoryEdit}/>\r\n            <Route path=\"/delete\" exact component={DeleteJob}/>\r\n          </div>\r\n        </HashRouter>\r\n      </div>\r\n    </ToastProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { CREATE_JOB } from '../actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n  userName: null,\r\n  projectName: null,\r\n  profileName: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOB:\r\n      return { ...state,\r\n        userName: action.payload.userName,\r\n        projectName: action.payload.projectName,\r\n        profileName: action.payload.profileName\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport newJobReducer from './newJobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport toUploadReducer from './toUploadReducer';\r\nimport clearStorageReducer from './clearStorageReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  form: formReducer,\r\n  newJob: newJobReducer,\r\n  categories: categoriesReducer,\r\n  uploadQueue: toUploadReducer,\r\n  clearStorage: clearStorageReducer\r\n})\r\n\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'CLEAR_LOCALSTORAGE'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer;\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE,\r\n  UPDATE_PHOTOQTY\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { TO_UPLOAD } from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case TO_UPLOAD:\r\n      return { ...state, uploadQueue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  CLEAR_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CLEAR_LOCALSTORAGE:\r\n      return { ...state, categories: undefined, newJob: undefined };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import db from './database/db';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    newJob: store.getState().newJob,\r\n    categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n\r\nserviceWorker.register();\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n"],"sourceRoot":""}